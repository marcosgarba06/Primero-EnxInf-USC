xlab = "n",      # Etiqueta del eje x
ylab = "f(n) = n * log10(n)",  # Etiqueta del eje y
main = "Gráfica de f(n) = n * log10(n)",
las = 1          # Orientación de las etiquetas de los ejes
)
n <- seq(1, 10000, length.out = 10000)  # 1000 puntos entre 1 y 50,000,000
n <- seq(1, 10, length.out = 10)  # 1000 puntos entre 1 y 50,000,000
# Calcular f(n) = n * log10(n)
f_n <- n * log10(n)
# Configurar la gráfica
plot(n, f_n,
type = "l",      # Línea continua
lwd = 2,         # Grosor de la línea
col = "darkblue",
xlab = "n",      # Etiqueta del eje x
ylab = "f(n) = n * log10(n)",  # Etiqueta del eje y
main = "Gráfica de f(n) = n * log10(n)",
las = 1          # Orientación de las etiquetas de los ejes
)
# Crear la gráfica con puntos y líneas exactas
plot(n, f_n,
type = "o",           # "o" para puntos y líneas
pch = 19,            # Puntos rellenos
col = "darkred",
lwd = 2,             # Grosor de la línea
xlab = "n",
ylab = "f(n) = n * log10(n)",
main = "Gráfica EXACTA de f(n) = n * log10(n)",
log = "x",           # Eje x en escala logarítmica (opcional)
xlim = c(1e5, 5e7),  # Ajustar límites para claridad
ylim = c(0, max(f_n, na.rm = TRUE)),
panel.first = grid(col = "gray", lty = "dotted"))
# Calcular EXACTAMENTE f(n) = n * log10(n) (evitando n=0)
f_n <- ifelse(n == 0, NA, n * log10(n))  # log10(0) no existe → NA
# Crear la gráfica con puntos y líneas exactas
plot(n, f_n,
type = "o",           # "o" para puntos y líneas
pch = 19,            # Puntos rellenos
col = "darkred",
lwd = 2,             # Grosor de la línea
xlab = "n",
ylab = "f(n) = n * log10(n)",
main = "Gráfica EXACTA de f(n) = n * log10(n)",
log = "x",           # Eje x en escala logarítmica (opcional)
xlim = c(1e5, 5e7),  # Ajustar límites para claridad
ylim = c(0, max(f_n, na.rm = TRUE)),
panel.first = grid(col = "gray", lty = "dotted"))
# Calcular EXACTAMENTE f(n) = n * log10(n) (evitando n=0)
f_n <- ifelse(n == 0, NA, n * log10(n))  # log10(0) no existe → NA
# Crear la gráfica con puntos y líneas exactas
plot(n, f_n,
type = "o",           # "o" para puntos y líneas
pch = 19,            # Puntos rellenos
col = "darkred",
lwd = 2,             # Grosor de la línea
xlab = "n",
ylab = "f(n) = n * log10(n)",
main = "Gráfica EXACTA de f(n) = n * log10(n)",
log = "x",           # Eje x en escala logarítmica (opcional)
xlim = c(1e5, 5e7),  # Ajustar límites para claridad
ylim = c(0, max(f_n, na.rm = TRUE)),
panel.first = grid(col = "gray", lty = "dotted"))
# Crear la gráfica con puntos y líneas exactas
plot(n, f_n,
type = "o",           # "o" para puntos y líneas
pch = 19,            # Puntos rellenos
col = "darkred",
lwd = 2,             # Grosor de la línea
xlab = "n",
ylab = "f(n) = n * log10(n)",
main = "Gráfica EXACTA de f(n) = n * log10(n)",
log = "x",           # Eje x en escala logarítmica (opcional)
xlim = c(1e5, 5e7),  # Ajustar límites para claridad
ylim = c(0, max(f_n, na.rm = TRUE)),
panel.first = grid(col = "gray", lty = "dotted"))
# Calcular EXACTAMENTE f(n) = n * log10(n) (evitando n=0)
f_n <- ifelse(n == 0, NA, n * log10(n))  # log10(0) no existe → NA
# Crear la gráfica con puntos y líneas exactas
plot(n, f_n,
type = "o",           # "o" para puntos y líneas
pch = 19,            # Puntos rellenos
col = "darkred",
lwd = 2,             # Grosor de la línea
xlab = "n",
ylab = "f(n) = n * log10(n)",
main = "Gráfica EXACTA de f(n) = n * log10(n)",
log = "x",           # Eje x en escala logarítmica (opcional)
xlim = c(1e5, 5e7),  # Ajustar límites para claridad
ylim = c(0, max(f_n, na.rm = TRUE)),
panel.first = grid(col = "gray", lty = "dotted"))
grid()
plot(n_datos, f_datos,
type = "b",  # "b" = puntos + líneas
lwd = 2,
pch = 19,
col = "purple",
xlab = "n",
ylab = "f(n)",
main = "Tus Datos Conectados con Líneas")
grid()
# Calcular EXACTAMENTE f(n) = n * log10(n) (evitando n=0)
f_n <- ifelse(n == 0, NA, n * log10(n))  # log10(0) no existe → NA
plot(n_datos, f_datos,
type = "b",  # "b" = puntos + líneas
lwd = 2,
pch = 19,
col = "purple",
xlab = "n",
ylab = "f(n)",
main = "Tus Datos Conectados con Líneas")
grid()
# Calcular EXACTAMENTE f(n) = n * log10(n) (evitando n=0)
f_n <-  n*log10(n)  # log10(0) no existe → NA
plot(n_datos, f_datos,
type = "b",  # "b" = puntos + líneas
lwd = 2,
pch = 19,
col = "purple",
xlab = "n",
ylab = "f(n)",
main = "Tus Datos Conectados con Líneas")
grid()
plot(n_datos, n*log10(n),
type = "b",  # "b" = puntos + líneas
lwd = 2,
pch = 19,
col = "purple",
xlab = "n",
ylab = "f(n)",
main = "Tus Datos Conectados con Líneas")
grid()
plot(n_datos, n*log10(n),
type = "b",  # "b" = puntos + líneas
lwd = 2,
pch = 19,
col = "purple",
xlab = "n",
ylab = "f(n)",
main = "Tus Datos Conectados con Líneas")
grid()
# Crear la gráfica
plot(n, n*log10(10),
type = "l",         # Usar puntos y líneas
pch = 19,          # Símbolo de puntos rellenos
col = "blue",       # Color azul
xlab = "n",        # Etiqueta del eje x
ylab = "f(n)",     # Etiqueta del eje y
main = "Gráfica de f(n) vs n",  # Título
cex = 0.7,          # Tamaño de los puntos
lwd = 2)            # Grosor de la línea
# Crear la gráfica
plot(n, n*log10(2),
type = "l",         # Usar puntos y líneas
pch = 19,          # Símbolo de puntos rellenos
col = "blue",       # Color azul
xlab = "n",        # Etiqueta del eje x
ylab = "f(n)",     # Etiqueta del eje y
main = "Gráfica de f(n) vs n",  # Título
cex = 0.7,          # Tamaño de los puntos
lwd = 2)            # Grosor de la línea
# Crear la gráfica
plot(n, n*log10(n),
type = "l",         # Usar puntos y líneas
pch = 19,          # Símbolo de puntos rellenos
col = "blue",       # Color azul
xlab = "n",        # Etiqueta del eje x
ylab = "f(n)",     # Etiqueta del eje y
main = "Gráfica de f(n) vs n",  # Título
)            # Grosor de la línea
# Crear la gráfica
plot(n, n*log10(n),
type = "l",
col = "blue",       # Color azul
xlab = "n",        # Etiqueta del eje x
ylab = "n*log(n)",     # Etiqueta del eje y
main = "Gráfica de 0(n*logn)",  # Título
)            # Grosor de la línea
# Crear la gráfica
plot(n, n*log10(n),
type = "l",
col = "blue",       # Color azul
xlab = "n",        # Etiqueta del eje x
ylab = "n*log(n)",     # Etiqueta del eje y
main = "Gráfica de O(n*logn)",  # Título
)            # Grosor de la línea
# Datos de entrada
n <- c(50000, 100000, 150000, 200000, 250000, 300000, 350000, 400000, 450000,
500000, 550000,600000, 650000, 700000, 750000, 800000, 850000, 900000,
950000, 1000000)
t_n <- c(0.804802, 3.226710, 7.279441, 13.006728, 20.325323, 29.353373, 40.136722,
52.409473, 66.506360, 81.914765, 99.020914, 117.616480, 138.414102,
162.659688, 184.072679, 209.987758, 237.536299, 267.633650, 295.398063,
329.320819)
# Configurar márgenes del gráfico (abajo, izquierda, arriba, derecha)
par(mar = c(5, 5, 4, 2) + 0.1)
# Crear gráfico base
plot(n, t_n,
type = "o",                # Tipo "o" para puntos y líneas
pch = 19,                  # Símbolo de puntos rellenos
col = "blue",              # Color azul
main = "Insertion Sort: Tiempo de Ejecución",  # Título
xlab = "Tamaño del vector (n)",                # Etiqueta eje X
ylab = "Tiempo (segundos)",                    # Etiqueta eje Y
xlim = c(0, max(n)),       # Límites del eje X
ylim = c(0, max(t_n)),     # Límites del eje Y
las = 1,                   # Orientación de las etiquetas de los ejes
cex.lab = 1.2,             # Tamaño de las etiquetas
cex.main = 1.4)
# Crear gráfico base
plot(n, t_n,
type = "l",                # Tipo "o" para puntos y líneas
pch = 19,                  # Símbolo de puntos rellenos
col = "blue",              # Color azul
main = "Tiempo de ejecución Insertion Sort
",  # Título
xlab = "Tamaño del vector (n)",                # Etiqueta eje X
ylab = "Tiempo de ejecución (s) (t(n))",                    # Etiqueta eje Y
xlim = c(0, max(n)),       # Límites del eje X
ylim = c(0, max(t_n)),     # Límites del eje Y
las = 1,                   # Orientación de las etiquetas de los ejes
cex.lab = 1.2,             # Tamaño de las etiquetas
cex.main = 1.4)
t_n <- c(0, 0.804802, 3.226710, 7.279441, 13.006728, 20.325323, 29.353373, 40.136722,
52.409473, 66.506360, 81.914765, 99.020914, 117.616480, 138.414102,
162.659688, 184.072679, 209.987758, 237.536299, 267.633650, 295.398063,
329.320819)
# Configurar márgenes del gráfico (abajo, izquierda, arriba, derecha)
par(mar = c(5, 5, 4, 2) + 0.1)
# Datos de entrada
n <- c(0, 50000, 100000, 150000, 200000, 250000, 300000, 350000, 400000, 450000,
500000, 550000,600000, 650000, 700000, 750000, 800000, 850000, 900000,
950000, 1000000)
t_n <- c(0, 0.804802, 3.226710, 7.279441, 13.006728, 20.325323, 29.353373, 40.136722,
52.409473, 66.506360, 81.914765, 99.020914, 117.616480, 138.414102,
162.659688, 184.072679, 209.987758, 237.536299, 267.633650, 295.398063,
329.320819)
# Configurar márgenes del gráfico (abajo, izquierda, arriba, derecha)
par(mar = c(5, 5, 4, 2) + 0.1)
# Crear gráfico base
plot(n, t_n,
type = "l",                # Tipo "o" para puntos y líneas
pch = 19,                  # Símbolo de puntos rellenos
col = "blue",              # Color azul
main = "Tiempo de ejecución Insertion Sort
",  # Título
xlab = "Tamaño del vector (n)",                # Etiqueta eje X
ylab = "Tiempo de ejecución (s) (t(n))",                    # Etiqueta eje Y
xlim = c(0, max(n)),       # Límites del eje X
ylim = c(0, max(t_n)),     # Límites del eje Y
las = 1,                   # Orientación de las etiquetas de los ejes
cex.lab = 1.2,             # Tamaño de las etiquetas
cex.main = 1.4)
# Datos
n <- c(0,25000, 50000, 75000, 100000, 125000, 150000, 175000, 200000,
225000, 250000, 275000, 300000, 325000, 350000, 375000, 400000)
tn <- c(0,3.177884, 12.494016, 29.038608, 50.569262, 80.957913, 116.270985,
158.212005, 207.130153, 264.368281, 326.344256, 395.240936, 467.449335,
552.983633, 637.450043, 735.465946, 835.602250)
# Crear gráfica básica
plot(n, tn,
type = "l",
col = "blue", # Color azul
xlab = "Tamaño (n)",  # Etiqueta del eje x
ylab = "Tiempo de ejecución (f(n))", # Etiqueta del eje y
main = "Tiempo de ejecución: Búsqueda de pares que suman X (O(n²))") # Título
# Crear gráfica básica
plot(n, tn,
type = "l",
col = "blue", # Color azul
xlab = "Tamaño (n)",  # Etiqueta del eje x
ylab = "Tiempo de ejecución (f(n))", # Etiqueta del eje y
) # Título
# Crear gráfica básica
plot(n, tn,
type = "l",
col = "blue", # Color azul
xlab = "Tamaño (n)",  # Etiqueta del eje x
ylab = "Tiempo de ejecución (f(n))", # Etiqueta del eje y
main = "Tiempo de ejecución: Búsqueda de pares que suman X (O(n²))") # Título
# Graficar la función
plot(n, n^2, type = "l",  col = "blue", xlab = "n",ylab = "n²", main = "Función f(n) = n²")
n=72
escrito = 41
library(LearningStats)
n=72
exitos = 41
library(LearningStats)
propportion.test(x=exito,n=n)
#H0: p <= 0.5
#Ha: p>0.5
install.packages("learningStats")
install.packages("LearningStats")
#Ejercicio 2
#X:"Puntuación escala Snellen de agudeza visual"
#X \in N(mu,sigma²)
#Contraste para a media(mu)
#H0: mu<=0.55
#Ha: mu > 0.55
x = c(0.71,0.66,0.64,0.49,0.80,0.67,0.52,0.81,0.55,0.65)
mu0 = 0.55
Mean.test(x=x, mu=mu0 ,alternative = "greater", alpha = 0.1)
#3
#X: "Tempo de vida do sistema de ventilacion" (anos)
#X \in N(mu,sigma²)
#Contraste sonbre a varianza
#H0: sigma² = 0.5
#Ha: sigma² != 0.5
mostra = c(9.9, 8.7,10.2,10.5,9.6,9.2,9.8,10.9,9.8)
sigma02= 0.5
variance.test(x=mostra, sigma02=0.5, alternative = "two.sided", )
variance.test(x=mostra, sigma02=0.5, alternative = "two.sided", alpha = 0.01)
#Ejercicio 5:
#H0: #H0: sigma2 <= 90^2
#Ha: sigma2 > 90^2
?variance.test()
#Ejercicio 4
library(LearningStats)
Mean.CI(datos$presion, conf.level = 0.97)
#Ejercicio 5:
#H0: #H0: sigma2 <= 90^2
#Ha: sigma2 > 90^2
?variance.test()
setwd("~/EnxInf/Primero/SegundoCuatri/Estadistica/Practicas/Examen")
#Ejercicio 1
datos =
?factor
?factor
?factor
#Ejercicio 1
datos = read.table("datos_examen_lunes.txt", headers = T, sep=";" , dec=".")
head(datos)
#Ejercicio 1
datos = read.table("datos_examen_lunes.txt", headers = T, sep=";" , dec=".")
head(datos)
#Ejercicio 1
datos = read.table("datos_examen_lunes.txt", header = T, sep=";" , dec=".")
head(datos)
#Variable cualitativa ordinal (nivel)
ni = table(datos$nivel); ni
fi = ni/n; fi
#Variable cualitativa ordinal (nivel)
ni = table(datos$nivel); ni
n = length(datos$nivel)
fi = ni/n; fi
Ni = cumsum(ni)
Ni = cumsum(ni); Ni
Fi = cumsum(fi)
Fi = cumsum(fi); Fi
#Se puede representar con un diagrama de sectores
pie(ni)
pie(fi)
barplot(ni)
barplot(fi)
taboa=cbind(ni,fi,Ni,Fi);taboa
#Variable cuantitativa discreta (lote)
ni = table(datos$lote);ni
n = length(datos$lote)
fi = ni/n; fi
Ni = cumsum(ni); Ni
Fi = cumsum(fi); Fi
taboa=cbind(ni,fi,Ni,Fi);taboa
#Variable cuantitativa discreta (lote)
ni2 = table(datos$lote);ni2
n2 = length(datos$lote)
fi = ni2/n2; fi2
Ni2 = cumsum(ni2); ni2
Fi2 = cumsum(fi2); Fi2
taboa2=cbind(ni,fi,Ni,Fi);taboa2
#se puede representar con un diagrama de barras
barplot(ni2)
#Ejercicio 1
datos = read.table("datos_examen_lunes.txt", header = T, sep=";" , dec=".")
head(datos)
#Variable cualitativa ordinal (nivel)
ni = table(datos$nivel); ni
n = length(datos$nivel)
fi = ni/n; fi
Ni = cumsum(ni); Ni
Fi = cumsum(fi); Fi
taboa=cbind(ni,fi,Ni,Fi);taboa
#Se puede representar con un diagrama de sectores y con un diagrama de barras
pie(ni)
barplot(fi)
#Variable cuantitativa discreta (lote)
ni2 = table(datos$lote);ni2
n2 = length(datos$lote)
fi = ni2/n2; fi2
Ni2 = cumsum(ni2); ni2
Fi2 = cumsum(fi2); Fi2
taboa2=cbind(ni,fi,Ni,Fi);taboa2
#se puede representar con un diagrama de barras
barplot(ni2)
#Ejercicio 2
#Posicion media y moda
media = mean(datos$recursos);media
head(datos)
mediana = median(datos$recursos);mediana
#Dispersion cuasivarianza y desviacion típica
cuasivar=var(datos$recursos);cuasivar
#Dispersion cuasivarianza y desviacion típica
cuasivar=var(datos$recursos);cuasivar
des_tipica = sd(datos$recursos)*sqrt((n-1)/n)
des_tipica = sd(datos$recursos)*sqrt((n-1)/n); des_tipica
#Histograma
hist(datos$recursos)
#Ejercicio 3
y = datos$ventas
x = datos$publicidad
modelo = lm(y~x)
mod
modelo
abline(mod,col=2,lwd=2)
abline(modelo,col=2,lwd=2)
#Ejercicio 3
y = datos$ventas
x = datos$publicidad
modelo = lm(y~x)
modelo
plot(datos$tiempo_proceso,datos$calidad,pch=16)
plot(x,y,pch=16)
modelo
abline(modelo,col=2,lwd=2)
modelo
#Ejercicio 3
y = datos$ventas
x = datos$publicidad
modelo = lm(x ~ y)
modelo
#Pendiente = 0.7556
#
plot(x,y,pch=16)
abline(modelo,col=2,lwd=2)
#Pendiente = 0.7556
#
plot(x,y,pch=16)
abline(modelo,col=2,lwd=2)
abline(modelo,col=2,lwd=2)
#Pendiente = 0.7556
#
plot(x,y,pch=16)
modelo = lm(y ~ x)
modelo
#Pendiente = 0.7556
#
plot(x,y,pch=16)
#Pendiente = 0.7556
#
plot(x,y,pch=16)
abline(modelo,col=2,lwd=2)
#Pendiente = 0.7556
#
plot(y,x,pch=16)
abline(modelo,col=2,lwd=2)
modelo = lm(y ~ x)
modelo
#Pendiente = 0.7556
#
plot(x,y,pch=16)
abline(modelo,col=2,lwd=2)
#H0: μ0 = 5.5
#Ha: μ0 = 5.5
library(LearningStats)
Mean.test(x=datos$tiempo_produccion, mu=5.5 ,alternative = "two.sided", alpha = 0.05)
#Coeficiente de correlacion
cor(x,y)#relacion lineal decreciente no muy fuerte (fuerte es menos de -0.7)
#Coeficiente de determinacion
summary(modelo)
#Ejercicio 4
dat  = datos$grupo[]
#Ejercicio 4
datosgrupo= datos$grupo
datA  = datosgrupo[datos$grupo = A]
datA  = datosgrupo[datos$grupo = "A"]
#Ejercicio 4
datosgrupo= datos$grupo
datA  = datosgrupo[datos$grupo = "A"]
#Ejercicio 4
datosgrupo=
datA = datos$grupo[datos$grupo = "A"]
#H0: μ0 = 5.5
#Ha: μ0 = 5.5
library(LearningStats)
datA = datos$grupo[datos$grupo = "A"]
datA = datos$grupo = "A"
datA
#Ejercicio 4
datgrupo = datos$grupo
dat$grupo
#Ejercicio 4
datgrupo = datos$grupo
datgrupo
#Ejercicio 4
datgrupo = datos$grupo
datgrupo
datosgrupo
exitos = table(datosgrupo)
exitos = table(datosgrupo);exitos
ni = table(datosgrupo);exitos
ni = table(datosgrupo);ni
exitos = 86 #Sacado de la
exitos
#Ejercicio 4
datosgrupo = datos$grupo
datosgrupo
ni = table(datosgrupo);ni
exitos = 86 #Sacado de la frecuencia absoluta de los distintos grupos
exitos
n = length(datosgrupo)
proportion.CI(x = exitos, n = n, conf.level = 0.9)
#Si se realiza la estimacion con un solo punto obtenemos que la proporcion de los productos del
#grupo A es de 0.43, lo que implica que un 43% de los productos son del grupo A y e
100-43
