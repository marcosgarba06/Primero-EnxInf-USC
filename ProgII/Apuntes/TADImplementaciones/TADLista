#include <stdio.h>
#include <stdlib.h>

/** Definicion del tipo de elemento almacenado en la lista **/
#define MAX_NAME 25
#define MAX_APE 50
#define MAX_EMAIL 255

typedef int TIPOELEMENTOLISTA;
///////////////////////////////////////////////////

/** Estructura para un nodo de la lista **/
typedef struct nodoLista {
    TIPOELEMENTOLISTA elemento;
    struct nodoLista *sig;
} STNODOLISTA;
typedef STNODOLISTA *TPOSICION;

/** Estructura para la lista **/
typedef struct {
    TPOSICION inicio;
    int longitud;
    TPOSICION fin;
} STLISTA;
typedef STLISTA *TLISTA;

/**
 * Reserva memoria para una lista de datos con el tipo [TIPOELEMENTOLISTA].
 *
 * @param q puntero a la lista a crear.
 */
void crearLista(TLISTA *l) {
    *l = (TLISTA) malloc(sizeof(STLISTA)); //reserva memoria para la lista
    (*l)->inicio = (TPOSICION) malloc(sizeof(STNODOLISTA)); //crea un nodo inicial reservando memoria
    (*l)->inicio->sig = NULL; //el siguiente a este nodo es NULL
    (*l)->fin = (*l)->inicio; //establece el final como el nodo inicial
    (*l)->longitud = 0; //el tamaño es 0 (no hay elementos)
}

/**
 * Destruye (libera la memoria reservada) la lista [l] y todos los elementos que almacena.
 *
 * @param l puntero a la lista a destruir.
 */
void destruirLista(TLISTA *l) {
    (*l)->fin = (*l)->inicio; //pone el fin de la lista como el inicio
    while ((*l)->fin != NULL) { //recorre toda la lista eliminando los nodos 
        (*l)->fin = (*l)->fin->sig;
        free((*l)->inicio);
        (*l)->inicio = (*l)->fin;
    }
    free(*l); //libera la memoria de la lista (inicio, longitud y fin)
}

/**
 * Comprueba si la lista [l] esta vacia.
 *
 * @param l lista a comprobar si esta vacia.
 * @return 1 si la lista esta vacia, 0 en otro caso.
 */
int esListaVacia(TLISTA l) {
    return (l->longitud == 0); //comprueba si la longitud es 0
}

/**
 * Recupera la primera posicion de la lista.
 *
 * @param l lista de la cual recuperar la primera posicion.
 * @return la primera posicion tipo [TPOSICION] de la lista [l].
 */
TPOSICION primeroLista(TLISTA l) {
    return l->inicio; //devuelve el inicio de la lista (la posicion, no el elemento)
}

/**
 * Recupera la posicion del fin de la lista.
 *
 * @param l lista de la cual recuperar su final.
 * @return la posicion del fin tipo [TPOSICION] de la lista [l].
 */
TPOSICION finLista(TLISTA l) {
    return l->fin; //devuelve el fin de la lista (la posicion, no el elemento)
}

/**
 * Devuelve la posicion siguiente a [p] en la lista [l].
 *
 * @param l lista en la cual se va a buscar la siguiente posicion.
 * @param p posicion referencia para devolver la siguiente.
 * @return la posicion siguiente a [p].
 */
TPOSICION siguienteLista(TLISTA l, TPOSICION p) {
    return p->sig; //devuelve el siguiente nodo al que apunta p (no el elemento)
}

/**
 * Recupera el elemento almacenado en la posicion [p] pasada por argumento.
 *
 * @param l lista de la cual recuperar el elemento.
 * @param p posicion de la cual recuperar el elemento.
 * @param e puntero a la variable en la cual almacenar el elemento recuperado.
 */
void recuperarElementoLista(TLISTA l, TPOSICION p, TIPOELEMENTOLISTA *e){
    *e = p->sig->elemento; //recupera el elemento de la posicion p (no el nodo)
}

/**
 * Consulta la longitud de la lista [l].
 *
 * @param l lista de la cual consultar la longitud.
 * @return entero con el valor de la longitud de la lista.
 */
int longitudLista(TLISTA l) {
    return l->longitud; //devuelve la longitud (almaccenada en el struct)
}

/**
 * Inserta el elemento [e] en la posicion siguiente a la posicion [p] de la lista [l].
 *
 * @param l puntero a la lista en la cual se va a insertar el elemento.
 * @param p posicion despues de la cual se insertara el elemento.
 * @param e elemento a insertar.
 */
void insertarElementoLista(TLISTA *l, TPOSICION p, TIPOELEMENTOLISTA e){
    TPOSICION q = p->sig; //guarda el nodo siguiente al que se va a insertar
    p->sig = (STNODOLISTA *) malloc(sizeof(STNODOLISTA)); //reserva memoria para el nuevo nodo
    p->sig->elemento = e; //se introduce el dato en este noddo nuevo
    p->sig->sig = q; //se pone el nodo de q como el siguiente al nuevo nodo
    if (q == NULL) { //se comprueba que no es el final, si lo es se pone el puntero fin
        (*l)->fin = p->sig;
    }
    (*l)->longitud++; //se añade la longitud
}

/**
 * Suprime el elemento en posicion [p] de la lista [l].
 *
 * @param l puntero a la lista de la que se suprimira el elemento.
 * @param p posicion del elemento a suprimir.
 */
void suprimirElementoLista(TLISTA *l, TPOSICION p){
    TPOSICION q;

    q = p->sig; //guarda el nodo que se va a eliminar
    p->sig = q->sig; //ahora el siguiente nodo al que apunta p es el siguiente al que se va a eliminar
    if (p->sig == NULL) { //se comprueba si es el ultimo el que se elimina, si lo es se actualiza el fin
        (*l)->fin = p;
    }
    free(q); //se libera el nodo que almacenaba el elemento a eliminar
    (*l)->longitud--; //se resta la longitud
}

/**
 * Modifica el valor del elemento almacenado en la posicion [p] guardando el nuevo elemento [e].
 *
 * @param l puntero a la lista de la cual se va a modificar el elemento.
 * @param p posicion del valor que se va a modificar.
 * @param e nuevo valor a guardar en la posicion [p].
 */
void modificarElementoLista(TLISTA *l, TPOSICION p, TIPOELEMENTOLISTA e){
    p->sig->elemento = e; //se cambia el elemento a e